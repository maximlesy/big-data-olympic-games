@page "/"
@using Tensorflow
@inject HttpClient Http

@using Tensorflow;
@using static Tensorflow.Binding;
@using NumSharp;

<div class="container d-flex align-items-center justify-content-center vh-100">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-lg p-4">
                <div class="text-center mb-4">
                    <img src="resources/olympic-rings.png" alt="Olympic Rings" style="max-width: 200px;" />
                </div>
                <h3 class="card-title mb-4">Sport Prediction Form</h3>
                <EditForm Model="@inputData" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Weight:</label>
                        <InputNumber @bind-Value="inputData.Weight" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Height:</label>
                        <InputNumber @bind-Value="inputData.Height" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Age:</label>
                        <InputNumber @bind-Value="inputData.Age" class="form-control" />
                    </div>
                    <div class="form-group" style="margin-bottom: 20px">
                        <label>Sex:</label>
                        <InputSelect @bind-Value="inputData.Sex" class="form-control">
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </InputSelect>
                    </div>
                    <div class="text-center" style="margin-bottom: 20px">
                        <button type="submit" class="btn btn-primary">Predict Sport</button>
                    </div>
                </EditForm>
                @if (!string.IsNullOrEmpty(predictedSport))
                {
                    <p class="mt-4 text-center"><strong>Predicted Sport:</strong> @predictedSport</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private SportInputData inputData = new();
    private string predictedSport;

    protected async override Task OnInitializedAsync()
    {
        SportInputData data = new SportInputData
            {
                Weight = 100,  //
                Height = 100,
                Age = 30,
                Sex = "Female"
            };


        try
        {
            var path = Path.GetFullPath("../../data-files/dnn_model.h5");  // Path to your SavedModel

            using (var session = tf.Session())
            {
                session.graph.Import(path);

                var inputTensor = tf.constant(new float[,] {
                    { data.Weight, data.Height, data.BMI, data.Age, float.Parse(data.Sex) }
                });

                // var runner = session.GetRunner();
                // runner.AddInput(session.graph["input_node_name"][0], inputTensor);  // Adjust the input node name
                // runner.Fetch(session.graph["output_node_name"][0]);  // Adjust the output node name

                // var output = runner.Run();
                // predictedSport = ProcessOutput(output);  // You need to implement this method based on your output processing
            }
        }
        catch (Exception ex)
        {
            predictedSport = $"Error: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        /*var response = await Http.PostAsJsonAsync("http://localhost:8000/predict", inputData);
        var result = await response.Content.ReadFromJsonAsync<PredictionResponse>();
        predictedSport = result?.PredictedSport ?? "Unknown";*/

    }

    private class SportInputData
    {
        public float Weight { get; set; }
        public float Height { get; set; }
        public int Age { get; set; }
        public string Sex { get; set; }
        public float BMI => Weight / ((Height / 100) * (Height / 100));
    }

    private class PredictionResponse
    {
        public string PredictedSport { get; set; }
    }
}
